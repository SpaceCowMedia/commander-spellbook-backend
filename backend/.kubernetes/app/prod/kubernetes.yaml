---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: spellbook-prod
  name: spellbook-api
  labels:
    app: spellbook-api
spec:
  selector:
    matchLabels:
      app: spellbook-api
  template:
    metadata:
      labels:
        app: spellbook-api
    spec:
      serviceAccountName: app-service-account
      containers:
        - name: spellbook-api-app
          image: 083767677168.dkr.ecr.us-east-2.amazonaws.com/spellbook-prod-ecr
          resources:
            requests:
              cpu: 256m
              memory: 512M
          ports:
            - containerPort: 80
          readinessProbe:
            httpGet:
              path: /
              port: 80
              httpHeaders:
              - name: Host
                value: commanderspellbook.com
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            
          livenessProbe:
            httpGet:
              path: /
              port: 80
              httpHeaders:
              - name: Host
                value: commanderspellbook.com
            initialDelaySeconds: 40
            periodSeconds: 20
            timeoutSeconds: 5
          env:
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: django-secret
            - name: KUBE_SQL_ENGINE
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: db-engine
            - name: KUBE_SQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: db-name
            - name: KUBE_SQL_USER
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: db-user
            - name: KUBE_SQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: db-password
            - name: KUBE_SQL_HOST
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: db-host
            - name: KUBE_SQL_PORT
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: db-port
            - name: AWS_S3_BUCKET
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: aws-s3-bucket
            - name: THIS_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: DISCORD_CLIENTID
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: discord-client-id
            - name: DISCORD_CLIENTSECRET
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: discord-client-secret
            - name: DISCORD_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: discord-webhook-url
            - name: MOXFIELD_USER_AGENT
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: moxfield-user-agent
---
# Autoscaling of the api pods
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: spellbook-api-autoscaler
  namespace: spellbook-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: spellbook-api
  minReplicas: 3
  maxReplicas: 36
  targetCPUUtilizationPercentage: 80

---
# API Service
apiVersion: v1
kind: Service
metadata:
  name: spellbook-api-service
  namespace: spellbook-prod
  labels:
    app: spellbook-api
    tier: web
spec:
  type: NodePort
  selector:
    app: spellbook-api
  ports:
    - port: 80
      targetPort: 80

---
# Ingress Load Balancer
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: spellbook-ingress
  namespace: spellbook-prod
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/ip-address-type: dualstack
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/tags: project=commanderspellbook,environment=prod
    alb.ingress.kubernetes.io/target-group-attributes: deregistration_delay.timeout_seconds=60
    ## SSL Settings
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}, {"HTTP":80}]'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-2:083767677168:certificate/e6f5834f-bd9a-4333-962a-8fe0857e84ea
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
spec:
  rules:
    - host: backend.commanderspellbook.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ssl-redirect
                port:
                  name: use-annotation
          - path: /
            pathType: Prefix
            backend:
              service:
                name: spellbook-api-service
                port:
                  number: 80
    - host: commanderspellbook.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ssl-redirect
                port:
                  name: use-annotation
          - path: /
            pathType: Prefix
            backend:
              service:
                name: spellbook-client-service
                port:
                  number: 80
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: app-service-account
  namespace: spellbook-prod
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::083767677168:role/spellbook-application-role
---
# Service Account for the Load Balancer Controller
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: aws-load-balancer-controller
  name: aws-load-balancer-controller
  namespace: kube-system
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::083767677168:role/spellbook-loadbalancer-role
---
# Security group policy to allow pods to connect to RDS
apiVersion: vpcresources.k8s.aws/v1beta1
kind: SecurityGroupPolicy
metadata:
  name: spellbook-sg-policy
spec:
  serviceAccountSelector:
    matchLabels:
      role: backend
  securityGroups:
    groupIds:
      - sg-010cc2542954759b3
      - sg-08c982cb0b6242f63

