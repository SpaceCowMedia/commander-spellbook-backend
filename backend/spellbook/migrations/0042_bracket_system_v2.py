# Generated by Django 5.1.1 on 2025-02-25 08:48

import django.core.validators
from django.db import migrations, models, connection
from ._utils import PopulateNameField
import django.contrib.postgres.indexes
import django.db.models.functions.text
import django.db.models.lookups


def migrate_feature_status(apps, schema_editor):
    Feature = apps.get_model('spellbook', 'Feature')
    Feature.objects.filter(relevant=True).update(status='S')
    Feature.objects.filter(utility=True).update(status='U')
    Feature.objects.filter(relevant=False, utility=False).update(status='H')


def reverse_migrate_feature_status(apps, schema_editor):
    Feature = apps.get_model('spellbook', 'Feature')
    Feature.objects.all().update(relevant=False, utility=False)
    Feature.objects.filter(status='S').update(relevant=True)
    Feature.objects.filter(status='U').update(utility=True)


if connection.vendor == 'postgresql':
    from django.contrib.postgres.operations import TrigramExtension
    extra_operations_before = [
        migrations.RemoveIndex(
            model_name='variant',
            name='variant_other_prereq_trgm_idx',
        ),
    ]
    extra_operations = [
        TrigramExtension(),
        migrations.AddIndex(
            model_name='variant',
            index=django.contrib.postgres.indexes.GinIndex(django.contrib.postgres.indexes.OpClass(django.db.models.functions.text.Upper('easy_prerequisites'), name='gin_trgm_ops'), name='variant_easy_prereq_trgm_idx'),
        ),
        migrations.AddIndex(
            model_name='variant',
            index=django.contrib.postgres.indexes.GinIndex(django.contrib.postgres.indexes.OpClass(django.db.models.functions.text.Upper('notable_prerequisites'), name='gin_trgm_ops'), name='variant_notabl_prereq_trgm_idx'),
        ),
    ]
else:
    extra_operations = []
    extra_operations_before = []


class Migration(migrations.Migration):

    dependencies = [
        ('spellbook', '0041_bracket_system'),
    ]

    operations = [
        *extra_operations_before,
        migrations.RemoveConstraint(
            model_name='feature',
            name='relevant_feature_not_utility',
        ),
        migrations.RemoveIndex(
            model_name='variant',
            name='spellbook_v_complet_634bae_idx',
        ),
        migrations.RemoveIndex(
            model_name='variant',
            name='spellbook_v_other_p_28f14d_idx',
        ),
        migrations.RenameField(
            model_name='card',
            old_name='mass_land_destruction',
            new_name='mass_land_denial',
        ),
        migrations.AlterField(
            model_name='card',
            name='mass_land_denial',
            field=models.BooleanField(default=False, help_text='Whether this card can inhibit or destroy numerous lands', verbose_name='mass land denial card'),
        ),
        migrations.AddField(
            model_name='variant',
            name='bracket_tag',
            field=models.CharField(choices=[('R', 'Ruthless'), ('S', 'Spicy'), ('P', 'Powerful'), ('O', 'Oddball'), ('PA', 'Precon Appropriate'), ('C', 'Casual')], default='R', editable=False, help_text='Bracket tag for this variant', max_length=2),
        ),
        migrations.AddField(
            model_name='variant',
            name='bracket_tag_override',
            field=models.CharField(blank=True, choices=[('R', 'Ruthless'), ('S', 'Spicy'), ('P', 'Powerful'), ('O', 'Oddball'), ('PA', 'Precon Appropriate'), ('C', 'Casual')], help_text='Override bracket tag for this variant', max_length=2, null=True),
        ),
        migrations.RemoveField(
            model_name='variant',
            name='bracket',
        ),
        migrations.AddField(
            model_name='variant',
            name='bracket',
            field=models.GeneratedField(db_persist=True, expression=models.Case(models.When(bracket_tag_override='R', then=models.Value(4)), models.When(bracket_tag_override='S', then=models.Value(3)), models.When(bracket_tag_override='P', then=models.Value(3)), models.When(bracket_tag_override='O', then=models.Value(2)), models.When(bracket_tag_override='PA', then=models.Value(2)), models.When(bracket_tag_override='C', then=models.Value(1)), models.When(bracket_tag='R', then=models.Value(4)), models.When(bracket_tag='S', then=models.Value(3)), models.When(bracket_tag='P', then=models.Value(3)), models.When(bracket_tag='O', then=models.Value(2)), models.When(bracket_tag='PA', then=models.Value(2)), models.When(bracket_tag='C', then=models.Value(1)), default=models.Value(0)), output_field=models.PositiveSmallIntegerField(help_text='Bracket number based on the tag')),
        ),
        migrations.RemoveField(
            model_name='variant',
            name='complete',
        ),
        migrations.RenameField(
            model_name='variant',
            old_name='other_prerequisites_line_count',
            new_name='prerequisites_line_count',
        ),
        migrations.RenameField(
            model_name='combo',
            old_name='other_prerequisites',
            new_name='notable_prerequisites',
        ),
        migrations.AlterField(
            model_name='combo',
            name='notable_prerequisites',
            field=models.TextField(blank=True, help_text='Notable prerequisites for this combo.', validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$')]),
        ),
        migrations.AddField(
            model_name='feature',
            name='status',
            field=models.CharField(choices=[('U', 'Utility'), ('H', 'Helper'), ('C', 'Contextual'), ('S', 'Standalone')], default='U', help_text='Is this feature an utility for variant generation, a helper to be exploited somehow, or a standalone, probably impactful effect?', max_length=2, verbose_name='status'),
        ),
        migrations.RunPython(
            code=migrate_feature_status,
            reverse_code=reverse_migrate_feature_status,
        ),
        migrations.RemoveField(
            model_name='feature',
            name='relevant',
        ),
        migrations.RemoveField(
            model_name='feature',
            name='utility',
        ),
        migrations.RenameField(
            model_name='featureofcard',
            old_name='other_prerequisites',
            new_name='notable_prerequisites',
        ),
        migrations.AlterField(
            model_name='featureofcard',
            name='notable_prerequisites',
            field=models.TextField(blank=True, help_text='Notable prerequisites for this combo.', validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$')]),
        ),
        migrations.RenameField(
            model_name='variant',
            old_name='other_prerequisites',
            new_name='notable_prerequisites',
        ),
        migrations.AlterField(
            model_name='variant',
            name='notable_prerequisites',
            field=models.TextField(blank=True, help_text='Notable prerequisites for this combo.', validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$')]),
        ),
        migrations.RenameField(
            model_name='variantsuggestion',
            old_name='other_prerequisites',
            new_name='notable_prerequisites',
        ),
        migrations.AlterField(
            model_name='variantsuggestion',
            name='notable_prerequisites',
            field=models.TextField(blank=True, help_text='Notable prerequisites for this combo.', validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$')]),
        ),
        migrations.AddField(
            model_name='combo',
            name='easy_prerequisites',
            field=models.TextField(blank=True, help_text='Easily achievable prerequisites for this combo.', validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$')]),
        ),
        migrations.AddField(
            model_name='featureofcard',
            name='easy_prerequisites',
            field=models.TextField(blank=True, help_text='Easily achievable prerequisites for this combo.', validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$')]),
        ),
        migrations.AddField(
            model_name='variant',
            name='easy_prerequisites',
            field=models.TextField(blank=True, help_text='Easily achievable prerequisites for this combo.', validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$')]),
        ),
        migrations.AddField(
            model_name='variantsuggestion',
            name='easy_prerequisites',
            field=models.TextField(blank=True, help_text='Easily achievable prerequisites for this combo.', validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$')]),
        ),
        migrations.AddIndex(
            model_name='variant',
            index=models.Index(fields=['prerequisites_line_count'], name='spellbook_v_prerequ_bce3c0_idx'),
        ),
        migrations.AddIndex(
            model_name='feature',
            index=models.Index(fields=['status'], name='spellbook_f_status_d32f6b_idx'),
        ),
        *extra_operations,
        PopulateNameField(),
    ]
