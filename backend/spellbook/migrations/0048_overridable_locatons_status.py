# Generated by Django 5.1.1 on 2025-06-03 10:29

import django.core.validators
import spellbook.models.ingredient
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('spellbook', '0047_variantsuggestion_variant_of_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='featureneededincombo',
            options={'ordering': ['id']},
        ),
        migrations.RenameField(
            model_name='featureneededincombo',
            old_name='zone_locations_override',
            new_name='zone_locations',
        ),
        migrations.AddField(
            model_name='featureneededincombo',
            name='battlefield_card_state',
            field=models.CharField(blank=True, help_text='State of the card on the battlefield, if present.', max_length=512, validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$')], verbose_name='battlefield starting card state'),
        ),
        migrations.AddField(
            model_name='featureneededincombo',
            name='exile_card_state',
            field=models.CharField(blank=True, help_text='State of the card in exile, if present.', max_length=512, validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$')], verbose_name='exile starting card state'),
        ),
        migrations.AddField(
            model_name='featureneededincombo',
            name='graveyard_card_state',
            field=models.CharField(blank=True, help_text='State of the card in the graveyard, if present.', max_length=512, validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$')], verbose_name='graveyard starting card state'),
        ),
        migrations.AddField(
            model_name='featureneededincombo',
            name='library_card_state',
            field=models.CharField(blank=True, help_text='State of the card in the library, if present.', max_length=512, validators=[django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$')], verbose_name='library starting card state'),
        ),
        migrations.AddField(
            model_name='featureneededincombo',
            name='must_be_commander',
            field=models.BooleanField(default=False, help_text='Does the card have to be a commander?', verbose_name='must be commander'),
        ),
        migrations.AlterField(
            model_name='featureneededincombo',
            name='zone_locations',
            field=spellbook.models.ingredient.ZoneLocationsField(blank=True, help_text='Override the starting locations for this feature replacements in this combo.', max_length=6, verbose_name='starting locations override'),
        ),
        migrations.AlterField(
            model_name='featureneededincombo',
            name='quantity',
            field=models.PositiveSmallIntegerField(default=1, help_text='Quantity of the card in the combo.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='quantity'),
        ),
    ]
